version: "3.8"

services:

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    container_name: keycloak
    ports:
     - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
        

#  read:
#    image: grafana/loki:latest
#    command: "-config.file=/etc/loki/config.yaml -target=read"
#    ports:
#      - 3101:3100
#      - 7946
#      - 9095
#    volumes:
#      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
#    depends_on:
#      - minio
#    healthcheck:
#      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    networks: &loki-dns
#      microservice:
#        aliases:
#          - loki
#
#  write:
#    image: grafana/loki:latest
#    command: "-config.file=/etc/loki/config.yaml -target=write"
#    ports:
#      - 3102:3100
#      - 7946
#      - 9095
#    volumes:
#      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
#    healthcheck:
#      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    depends_on:
#      - minio
#    networks:
#      <<: *loki-dns
#
#  alloy:
#    image: grafana/alloy:latest
#    volumes:
#      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
#      - /var/run/docker.sock:/var/run/docker.sock
#    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
#    ports:
#      - 12345:12345
#    depends_on:
#      - gateway
#    networks:
#      - microservice
#
#  minio:
#    image: minio/minio
#    entrypoint:
#      - sh
#      - -euc
#      - |
#        mkdir -p /data/loki-data && \
#        mkdir -p /data/loki-ruler && \
#        minio server /data
#    environment:
#      - MINIO_ROOT_USER=loki
#      - MINIO_ROOT_PASSWORD=supersecret
#      - MINIO_PROMETHEUS_AUTH_TYPE=public
#      - MINIO_UPDATE=off
#    ports:
#      - 9000
#    volumes:
#      - ./.data/minio:/data
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
#      interval: 15s
#      timeout: 20s
#      retries: 5
#    networks:
#      - microservice
#  
#  prometheus:
#    image: prom/prometheus:v3.1.0
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    networks:
#      - microservice
#  
#  tempo:
#    image: grafana/tempo:2.6.1
#    container_name: tempo
#    command: -config.file /etc/tempo-config.yml
#    ports:
#      - "3110:3100"
#      - "4318:4318"
#    volumes:
#      - ../observability/tempo/tempo.yml:/etc/tempo-config.yml
#    networks:
#      - microservice
#
#  grafana:
#    image: grafana/grafana:latest
#    environment:
#      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#    depends_on:
#      - gateway
#    entrypoint:
#      - sh
#      - -euc
#      - |
#        /run.sh
#    ports:
#      - "3000:3000"
#    volumes:
#      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#    healthcheck:
#      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    networks:
#      - microservice
#
#  backend:
#    image: grafana/loki:latest
#    volumes:
#      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
#    ports:
#      - "3100"
#      - "7946"
#    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
#    depends_on:
#      - gateway
#    networks:
#      - microservice
#    
#
#  gateway:
#    image: nginx:latest
#    depends_on:
#      - read
#      - write
#    entrypoint:
#      - sh
#      - -euc
#      - |
#        cat <<EOF > /etc/nginx/nginx.conf
#        user  nginx;
#        worker_processes  5;  ## Default: 1
#
#        events {
#          worker_connections   1000;
#        }
#
#        http {
#          resolver 127.0.0.11;
#
#          server {
#            listen             3100;
#
#            location = / {
#              return 200 'OK';
#              auth_basic off;
#            }
#
#            location = /api/prom/push {
#              proxy_pass       http://write:3100\$$request_uri;
#            }
#
#            location = /api/prom/tail {
#              proxy_pass       http://read:3100\$$request_uri;
#              proxy_set_header Upgrade \$$http_upgrade;
#              proxy_set_header Connection "upgrade";
#            }
#
#            location ~ /api/prom/.* {
#              proxy_pass       http://read:3100\$$request_uri;
#            }
#
#            location = /loki/api/v1/push {
#              proxy_pass       http://write:3100\$$request_uri;
#            }
#
#            location = /loki/api/v1/tail {
#              proxy_pass       http://read:3100\$$request_uri;
#              proxy_set_header Upgrade \$$http_upgrade;
#              proxy_set_header Connection "upgrade";
#            }
#
#            location ~ /loki/api/.* {
#              proxy_pass       http://read:3100\$$request_uri;
#            }
#          }
#        }
#        EOF
#        /docker-entrypoint.sh nginx -g "daemon off;"
#    ports:
#      - "3100:3100"
#    healthcheck:
#      test: ["CMD", "service", "nginx", "status"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    networks:
#      - microservice


  rabbit:
    image: rabbitmq:4-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - microservice

  accountsdb:
    image: mysql
    container_name: accountsdb
    ports:
     - 3307:3306
    healthcheck: 
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: accountsdb
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
  
  
  loansdb:
    image: mysql
    container_name: loansdb
    ports:
     - 3309:3306
    healthcheck: 
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: loansdb
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
  
  
  cardsdb:
    image: mysql
    container_name: cardsdb
    ports:
     - 3308:3306
    healthcheck: 
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cardsdb
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
  
    
  config-server:
    image: "sayemx/configserver:s13"
    container_name: config-server
    ports:
      - "8071:8071"
#    depends_on:
#      rabbit:
#        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
    environment:
      OTEL_SERVICE_NAME: "configserver"
  
  
  eureka-server:
    image: "sayemx/eurekaserver:s13"
    container_name: eureka-server
    ports:
      - "8070:8070"
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
    environment:
      SPRING_APPLICATION_NAME: eurekaserver
      OTEL_SERVICE_NAME: "eurekaserver"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.11.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
   
     
  accounts-service:
    image: "sayemx/accounts-service:s13"
    container_name: accounts-service
#    ports:
#      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on: 
      config-server:
        condition: service_healthy
      accountsdb:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
    environment:
      SPRING_APPLICATION_NAME: accounts
      OTEL_SERVICE_NAME: "accounts"
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8071/"
      SPRING_PROFILES_ACTIVE: prod
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accountsdb"
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8070/eureka/
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.11.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
      
  
  
  loans-service:
    image: "sayemx/loans-service:s13"
    container_name: loans-service
#    ports:
#      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on: 
      config-server:
        condition: service_healthy
      loansdb:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
    environment:
      SPRING_APPLICATION_NAME: loans
      OTEL_SERVICE_NAME: "loans"
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8071/"
      SPRING_PROFILES_ACTIVE: prod
#      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loansdb"
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8070/eureka/
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.11.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
      
      
  cards-service:
    image: "sayemx/cards-service:s13"
    container_name: cards-service
#    ports:
#      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on: 
      config-server:
        condition: service_healthy
      cardsdb:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
    environment:
      SPRING_APPLICATION_NAME: cards
      OTEL_SERVICE_NAME: "cards"
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8071/"
      SPRING_PROFILES_ACTIVE: prod
#      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cardsdb"
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8070/eureka/
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.11.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
  
  
  message:
    image: "sayemx/message-service:s13"
    container_name: message-service
    depends_on:
      rabbit:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: "rabbit"
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
      
  
  gateway-server:
    image: "sayemx/gateway-server:s13"
    container_name: gateway-server
    ports:
      - "8072:8072"
    depends_on: 
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      accounts-service:
        condition: service_healthy
      loans-service:
        condition: service_healthy
      cards-service:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - microservice
    environment:
      SPRING_APPLICATION_NAME: gateway
      OTEL_SERVICE_NAME: "gateway"
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8071/"
      SPRING_PROFILES_ACTIVE: prod
#      SPRING_RABBITMQ_HOST: "rabbit"
      EUREKA_CLIENT_SERVICE-URL_DEFAULTZONE: http://eureka-server:8070/eureka/
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.11.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"


networks:
  microservice:
    driver: bridge
